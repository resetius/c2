%{
/*$Id$*/

/* Copyright (c) 2008 Alexey Ozeritsky (Алексей Озерицкий)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Alexey Ozeritsky.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
#include <stdio.h>
#include <math.h>
#include <stdexcept>
#include <sstream>
extern "C" {
#include "c2_lsystem_scanner.h"
}

#include "c2_lsystem.h"

extern int yyerror(Parser * ptr, const char *s);
extern "C" int yyget_lineno  (void);

%}
%union {
	double num;
	char* str;
}
%parse-param { Parser * ptr }
%token <str> VAR
%token <num> NUM
%token <str> TURTLE
%token <str> GRPIDT
%type  <num> number
%type  <str> turtle
%token AXIOM
%token THETA
%token ALPHA
%token ANGLE
%token MGL
%token <str> MGLSTR
%token ORDER
%right '='
%left '+' '-'
%left '*' '/'
%%

grp: GRPIDT '{' list '}' { ptr->push($1); /* named group   */ }
    | MGL MGLSTR { ptr->addMgl($2); }
    | grp grp
    ;

list: '\n'
    | list '\n'
    | list expr '\n'
    ;

number: NUM { $$ = $1; }
    | number '/' number { $$ = $1 / $3; }
    | number '*' number { $$ = $1 * $3; }
    | number '+' number { $$ = $1 + $3; }
    | number '-' number { $$ = $1 - $3; }
    | '(' number ')'    { $$ = $2; }
    ;

turtle: { $$ = strdup(""); }
    | TURTLE { $$ = $1; }
    ;

expr: AXIOM  TURTLE { ptr->last.setAxiom($2); free($2); }
    | THETA  number { ptr->last.theta = $2; }
    | ANGLE  number { ptr->last.theta = M_PI * (360.0 / $2) / 180.0; }
    | ALPHA  number { ptr->last.alpha = $2; }
    | VAR   '=' turtle { ptr->last.r[$1[0]] = $3; free($3); }
    | MGL    MGLSTR { ptr->last.addMgl($2); }
    | ORDER  NUM    { ptr->last.setOrder($2); }
    ;

%%
int yyerror(Parser * ptr, const char * s)
{
	std::stringstream str;
	str << "syntax error near line " << yyget_lineno() << "\n"; 
	ptr->error = true;
	throw std::logic_error(str.str());
	return 0;
}

