%{
#include <stdio.h>
#include <math.h>
extern "C" {
#include "c2_lsystem_scanner.h"
}

#include "c2_lsystem.h"

extern int yyerror(Parser * ptr, const char *s);

%}
%union {
	double num;
	char* str;
}
%parse-param { Parser * ptr }
%token <str> VAR
%token <num> NUM
%token <str> TURTLE
%token <str> GRPIDT
%type  <num> number
%type  <str> turtle
%token AXIOM
%token THETA
%token ALPHA
%token ANGLE
%right '='
%left '+' '-'
%left '*' '/'
%%

grp:  '{' list '}'        { ptr->push();   /* unnamed group */ }
    | GRPIDT '{' list '}' { ptr->push($1); /* named group   */ }
    ;

list: '\n'
    | list '\n'
    | list expr '\n'
    ;

number: NUM { $$ = $1; }
    | number '/' number { $$ = $1 / $3; }
    | number '*' number { $$ = $1 * $3; }
    | number '+' number { $$ = $1 + $3; }
    | number '-' number { $$ = $1 - $3; }
    | '(' number ')'    { $$ = $2; }
    ;

turtle: { $$ = strdup(""); }
    | TURTLE { $$ = $1; }
    ;

expr: AXIOM  TURTLE { ptr->last.setAxiom($2); free($2); }
    | THETA  number { ptr->last.theta = $2; }
    | ANGLE  number { ptr->last.theta = M_PI * (360.0 / $2) / 180.0; }
    | ALPHA  number { ptr->last.alpha = $2; }
    | VAR   '=' turtle { ptr->last.r[$1[0]] = $3; free($3); }
    ;

%%
int yyerror(Parser * ptr, const char * s)
{
	std::cerr << "parse error " << s << "\n";
	ptr->error = true;
	throw "error";
	return 0;
}

